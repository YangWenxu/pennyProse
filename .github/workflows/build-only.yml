name: Build PennyProse Application (No Docker Push)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # 前端构建
  frontend-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install --no-frozen-lockfile

    - name: Build frontend
      working-directory: ./frontend
      run: pnpm run build
      env:
        NODE_ENV: production

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: pennyprose-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 后端构建
  backend-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install backend dependencies
      working-directory: ./backend
      run: pnpm install --no-frozen-lockfile

    - name: Generate Prisma client
      working-directory: ./backend
      run: pnpm db:generate

    - name: Run tests
      working-directory: ./backend
      run: pnpm test
      env:
        NODE_ENV: test
        CI: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: pennyprose-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Python后端构建
  python-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./stock-analysis
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Initialize database
      working-directory: ./stock-analysis
      run: python database/init_db.py

    - name: Run Python tests
      working-directory: ./stock-analysis
      run: |
        python -m pytest tests/ -v
      env:
        PYTHONPATH: .
        CI: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: ./stock-analysis
        file: ./stock-analysis/Dockerfile
        push: false
        tags: pennyprose-stock-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 构建状态汇总
  build-summary:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build, python-build]
    if: always()
    steps:
    - name: Check build results
      run: |
        echo "Frontend build: ${{ needs.frontend-build.result }}"
        echo "Backend build: ${{ needs.backend-build.result }}"
        echo "Python build: ${{ needs.python-build.result }}"

        if [[ "${{ needs.frontend-build.result }}" == "success" &&
              "${{ needs.backend-build.result }}" == "success" &&
              "${{ needs.python-build.result }}" == "success" ]]; then
          echo "✅ All builds completed successfully!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some builds failed"
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
        fi

    - name: Create build summary
      run: |
        echo "## 🔨 PennyProse Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.frontend-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend (Node.js) | ${{ needs.backend-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Stock API (Python) | ${{ needs.python-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ env.BUILD_STATUS }}" == "success" ]]; then
          echo "🎉 **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Docker images built locally (not pushed to registry)" >> $GITHUB_STEP_SUMMARY
          echo "To enable Docker push, configure DOCKER_USERNAME and DOCKER_PASSWORD secrets" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some builds failed. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi
