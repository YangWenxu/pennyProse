name: Deploy PennyProse Full Stack Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/pennyprose-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/pennyprose-backend
  STOCK_API_IMAGE: ${{ secrets.DOCKER_USERNAME }}/pennyprose-stock-api

jobs:
  # 前端构建和部署
  frontend:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install --no-frozen-lockfile

    - name: Build frontend
      working-directory: ./frontend
      run: pnpm run build
      env:
        NODE_ENV: production

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./frontend/dist

  # Node.js 后端部署
  backend-node:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install backend dependencies
      working-directory: ./backend
      run: pnpm install --no-frozen-lockfile

    - name: Generate Prisma client
      working-directory: ./backend
      run: pnpm db:generate

    - name: Run tests
      working-directory: ./backend
      run: pnpm test
      env:
        NODE_ENV: test
        CI: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # Python 后端部署
  backend-python:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./stock-analysis
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Initialize database
      working-directory: ./stock-analysis
      run: python database/init_db.py

    - name: Run Python tests
      working-directory: ./stock-analysis
      run: |
        python -m pytest tests/ -v
      env:
        PYTHONPATH: .
        CI: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.STOCK_API_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./stock-analysis
        file: ./stock-analysis/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署状态检查和通知
  deploy-status:
    runs-on: ubuntu-latest
    needs: [frontend, backend-node, backend-python]
    if: always()
    steps:
    - name: Check deployment status
      run: |
        echo "Frontend status: ${{ needs.frontend.result }}"
        echo "Backend Node.js status: ${{ needs.backend-node.result }}"
        echo "Backend Python status: ${{ needs.backend-python.result }}"

        if [[ "${{ needs.frontend.result }}" == "success" &&
              "${{ needs.backend-node.result }}" == "success" &&
              "${{ needs.backend-python.result }}" == "success" ]]; then
          echo "✅ All services deployed successfully!"
          echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some services failed to deploy"
          echo "DEPLOYMENT_STATUS=failure" >> $GITHUB_ENV
        fi

    - name: Create deployment summary
      run: |
        echo "## 🚀 PennyProse Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | Image |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.frontend.result == 'success' && '✅ Success' || '❌ Failed' }} | \`${{ env.FRONTEND_IMAGE }}:latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend (Node.js) | ${{ needs.backend-node.result == 'success' && '✅ Success' || '❌ Failed' }} | \`${{ env.BACKEND_IMAGE }}:latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Stock API (Python) | ${{ needs.backend-python.result == 'success' && '✅ Success' || '❌ Failed' }} | \`${{ env.STOCK_API_IMAGE }}:latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ env.DEPLOYMENT_STATUS }}" == "success" ]]; then
          echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can now deploy using:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose pull && docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some services failed to deploy. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi
