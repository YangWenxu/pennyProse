name: Test PennyProse Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # 前端测试
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install --no-frozen-lockfile

    - name: Build frontend
      working-directory: ./frontend
      run: pnpm run build
      env:
        NODE_ENV: production

  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install backend dependencies
      working-directory: ./backend
      run: pnpm install --no-frozen-lockfile

    - name: Generate Prisma client
      working-directory: ./backend
      run: pnpm db:generate

    - name: Run tests
      working-directory: ./backend
      run: pnpm test
      env:
        NODE_ENV: test
        CI: true

  # Python后端测试
  python-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./stock-analysis
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python tests
      working-directory: ./stock-analysis
      run: |
        python -m pytest tests/ -v
      env:
        PYTHONPATH: .
        CI: true

    - name: Initialize database
      working-directory: ./stock-analysis
      run: python database/init_db.py

  # 测试状态汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, python-test]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "Frontend test: ${{ needs.frontend-test.result }}"
        echo "Backend test: ${{ needs.backend-test.result }}"
        echo "Python test: ${{ needs.python-test.result }}"

        if [[ "${{ needs.frontend-test.result }}" == "success" &&
              "${{ needs.backend-test.result }}" == "success" &&
              "${{ needs.python-test.result }}" == "success" ]]; then
          echo "✅ All tests passed!"
          echo "TEST_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some tests failed"
          echo "TEST_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi

    - name: Create test summary
      run: |
        echo "## 🧪 PennyProse Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.frontend-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend (Node.js) | ${{ needs.backend-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Stock API (Python) | ${{ needs.python-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ env.TEST_STATUS }}" == "success" ]]; then
          echo "🎉 **All tests passed! Ready for deployment.**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some tests failed. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi
